/**
 * 1. 클래스 로더?
 * 	클래스 로더는 JVM에서 사용 되는 목적언어(클래스)를 JVM메모리 상에 올려 사용 할 때 동작하며
 * 	JAVA파일로 부터 컴파일(JAVAC.EXE)된 클래스 파일을 클래스 로더에 적재 함으로써 클래스를
 * 	JVM이 실행 가능하게 만들어 준다.
 * 	클래스들은 참조 되는 순간 최초 적재 되며 참조 되지 않은 클래스는 JVM위에 적재 되지 않는다.
 * 
 * 
 * 2. 클래스 로더의 종류?
 * 	클래스 로더는 크게 3종류 작게는 5종류로 분류 될 수 있다.
 * 	=============================
 *  	ClassLoader의 종료
 * 	1. bootStrapClassLoader
 * 	2. extClassLoader
 * 	3. appClassLoader
 * 	----- EE 확장 classLoader -----
 * 	4. appletClassLoader
 * 	5. secureClassLoader
 * 	=============================
 * 
 * 	1 : bootstrapClassLoader
 * 		JVM이 런타임 돌입 시 시스템과 rt.jar파일을 로드 하는 부트스트랩 클래스 로더
 * 
 * 	2 : ExtClassLoader
 * 		JVM이 런타임 돌입 시 확장 클래스 즉 자바 버전 마다의 확장된 클래스를 지원하는 확장 클래스를 로더
 * 
 * 	3 : AppClassLoader
 * 		애플리케이션을 실행 하면서 사용 되는 클래스를 로더 ( 개발자들이 자주 보는 classLoader )
 * 		getSystemClassLoader로 불러 올 수 있는 클래스 로더 이다.
 * 
 * 	4 : appletClassLoader
 * 		웹 브라우저 상에서 돌아 가는 애플릿의 클래스를 동적 로드 하기 위한 클래스 로더 이며
 * 		현재는 각각 브라우저 마다 다르게 구현 하고 있으므로 모든 브라우저의 동일성을 보장 할 수 없다.
 * 
 * 	5 : secureClassLoader
 * 		이 클래스 로더는 클래스 파일의 바이너리 데이터를 로딩하면서 발생하는 
 * 		보안의 정책을 설정하기 위하여  작성된 클래스 로더이지만
 * 		URLClassLoader가 상속 받아 사용 되기 때문에
 * 		실재로는 다른 클래스 로더를 확장 할 수 있는 확장 클래스로의 역활을 한다.
 * 
 * 	아래는 SecureClassLoader 족보이다.
 * 		java.lang.Object 
 * 			|                                           
 * 			+--java.lang.ClassLoader                    
 * 			      |                                     
 * 			      +--java.security.SecureClassLoader    
 * 			      |                               
 * 			      +--java.net.URLClassLoader  
 *       
 *           
 *3. 동적인 클래스 로드
 *
 *	3-1 로드 타임 시 클래스 적재
 *		먼저 이전까지 설명 했던 클래스 로더에 관하여 짚어 보자.
 *		클래스는 로더는 JVM에 클래스를 로드 할 때 동작한다고 하였다.
 *		그렇다면 동작 하는 시기는 언제일까?
 *		정답은 클래스가 참조 될 때 이다.
 *		런타임 돌입 시 실행되는 부트스트랩 클래스 로더 역시 동일 하다.
 *		하지만 왜 런터임 시에 부트스트랩 클래스 로더 실행 되는지 궁금하지 않은가?
 *		그건 클래스를 로더 하기 위하여 필요한 java.lang.ClassLoader가 부트스트랩의 클래스 로더의 rt.jar에 포함 되어 있기 때문이다.
 *		그래서 부트스트랩 클래스 로더는 최초에 실행 되어 st.jar와 이들이 참조 하는 Object클래스를 JVM위에 로드 하게 되는 것이다.
 *
 *	3-2 런 타임 시 클래스 적재
 *		런타임 시는 사용자 또는 개발자가 작성한 클래스를 classpath위에 적재를 한다.
 *		이 때 클래스를 불러 오기 위하여 상속관계에 있는 클래스를 불러 와야 된다.
 *		이 말은 클래스 로더가 클래스를 동적으로 로드 할 때 해당 클래스의 상속관계를 확장성 있게 확인 하여
 *		타입에 따른 정합성을 확인 할 수 있다는 말이다.
 */

package ch1_ClassLoader;